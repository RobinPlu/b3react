{"version":3,"sources":["serviceWorker.js","components/Message/Message.js","components/Form/Form.js","components/App/App.js","config.js","components/About/About.js","index.js","images/logo.svg"],"names":["Boolean","window","location","hostname","match","Message","react_default","a","createElement","className","this","props","message","userName","imageUrl","src","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","list","messageRef","firebase","database","ref","child","fileInput","React","createRef","imgCanvas","listenMessages","nextProps","user","setState","displayName","event","target","value","newItem","push","_this2","console","log","current","files","name","file","img","Image","URL","createObjectURL","onload","canvas","getContext","drawImage","width","height","toBlob","blob","storage","put","then","snapshot","getDownloadURL","downloadURL","key","handleSend","_this3","limitToLast","on","values","val","map","item","index","Message_Message_Message","type","onChange","handleImage","bind","placeholder","handleChange","onKeyPress","handleKeyPress","onClick","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","auth","currentUser","onAuthStateChanged","provider","GoogleAuthProvider","signInWithPopup","signOut","logo","alt","handleLogOut","handleSignIn","Form_Form_Form","About","navigator","serviceWorker","ready","registration","unregister","Header","Link","to","concat","process","Main","Switch","Route","exact","path","component","Home","ReactDOM","render","BrowserRouter","basename","src_Header","src_Main","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.868cddd3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport './Message.css';\nexport default class Message extends Component {\n    render() {\n        return (\n            <div className=\"message\">\n                <span className=\"message__author\">\n                    {this.props.message.userName}:\n                </span>\n                {this.props.message.message}\n                {this.props.message.imageUrl ? <img src={this.props.message.imageUrl} /> : ''}\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './Form.css';\nimport Message from '../Message/Message';\nimport firebase from 'firebase';\n\nexport default class Form extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: 'Sebastian',\n            message: '',\n            list: [],\n            imageUrl: ''\n        };\n        this.messageRef = firebase.database().ref().child('messages');\n\n\n        // Create the ref\n        this.fileInput = React.createRef()\n        this.imgCanvas = React.createRef()\n\n    }\n\n    componentDidMount(){\n        this.listenMessages();\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.user) {\n            this.setState({ userName: nextProps.user.displayName });\n        }\n    }\n    handleChange(event) {\n        this.setState({ message: event.target.value });\n    }\n    handleSend() {\n        if (this.state.message) {\n            var newItem = {\n                userName: this.state.userName,\n                message: this.state.message,\n                imageUrl: this.state.imageUrl\n            }\n            this.messageRef.push(newItem);\n            this.setState({ message: '' });\n        }\n    }\n    handleImage() {\n\n        console.log(\"là\", this.fileInput.current.files[0].name)\n        console.log(\"là\", this.fileInput)\n\n        if (this.fileInput.current.files[0]) {\n            const file = this.fileInput.current.files[0];\n            //const reader = new FileReader();\n            // TODO : check si c'est une image\n            let img = new Image;\n            img.src = URL.createObjectURL(file);\n            console.log('img.src == ', img.src)\n            console.log('refcanvas == ', this.imgCanvas)\n            img.onload = () => {\n                console.log('img onooaded')\n                let canvas = this.imgCanvas\n                let ctx = this.imgCanvas.current.getContext('2d');\n                ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, 100, 100)\n                console.log('pouf', canvas)\n                canvas.current.toBlob(blob => {\n                    // inject into storage then send msg\n                    firebase.storage().ref('images/').child(file.name)\n                        .put(blob)\n                        .then(snapshot => {\n                            snapshot.ref.getDownloadURL()\n                                .then(downloadURL => {\n                                    this.setState({ imageUrl: downloadURL });\n                                });\n                        })\n\n                }, 'image/webp', 0.8)\n\n            };\n        }\n    }\n    handleKeyPress(event) {\n        if (event.key !== 'Enter') return;\n        this.handleSend();\n    }\n    listenMessages() {\n        this.messageRef\n            .limitToLast(10)\n            .on('value', message => {\n                this.setState({\n                    list: Object.values(message.val()),\n                });\n            });\n    }\n    render() {\n        return (\n            <div className=\"form\">\n                <div className=\"form__message\">\n                    {this.state.list.map((item, index) =>\n                        <Message key={index} message={item} />\n                    )}\n                </div>\n                <canvas ref={this.imgCanvas}></canvas>\n                <input type=\"file\" ref={this.fileInput} onChange={this.handleImage.bind(this)}></input>\n                <div className=\"form__row\">\n\n\n                    <input\n                        className=\"form__input\"\n                        type=\"text\"\n                        placeholder=\"Type message\"\n                        value={this.state.message}\n                        onChange={this.handleChange.bind(this)}\n                        onKeyPress={this.handleKeyPress.bind(this)}\n                    />\n                    <button\n                        className=\"form__button\"\n                        onClick={this.handleSend.bind(this)}\n                    >\n                        Envoyer\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport logo from '../../images/logo.svg';\nimport './App.css';\nimport Form from '../Form/Form.js';\nimport firebase from 'firebase';\nimport firebaseConfig from '../../config';\n\nfirebase.initializeApp(firebaseConfig);\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n    }\n  }\n\n  componentDidMount() {\n\n     if(firebase.auth().currentUser) {\n      this.setState({ user: firebase.auth().currentUser });\n     }\n\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({ user: user });\n    });\n  }\n\n  handleSignIn() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider);\n  }\n  handleLogOut() {\n    firebase.auth().signOut();\n  }\n\n  render() {\n    return (\n        <div className=\"app\">\n          <div className=\"app__header\">\n            <img src={logo} className=\"app__logo\" alt=\"logo\" />\n            <h2>\n              REACT ME REND MAAAAAALAAADEUH COMPLETEMENT MAALAAAADEUH\n            </h2>\n            <p>prout</p>\n\n            {!this.state.user ? (\n                <button\n                    className=\"app__button\"\n                    onClick={this.handleSignIn.bind(this)}\n                >\n                  Sign In\n                </button>\n            ) : (\n                <button\n                    className=\"app__button\"\n                    onClick={this.handleLogOut.bind(this)}\n                >\n                  Log out\n                </button>\n            )}\n          </div>\n\n\n          {this.state.user ?\n              <div className=\"app__list\">\n                <Form user={this.state.user} />\n              </div>\n              :\n              'Le petit bouton connexion permet de vous connecter afin d\\'accéder aux messages \"'}\n\n\n\n        </div>\n    );\n  }\n}\nexport default App;","\nexport default {\n    apiKey: \"AIzaSyATS2cers_humBRT5xosEWBMBBJVmGR54Y\",\n    authDomain: \"b3dev-ducul.firebaseapp.com\",\n    databaseURL: \"https://b3dev-ducul.firebaseio.com\",\n    projectId: \"b3dev-ducul\",\n    storageBucket: \"b3dev-ducul.appspot.com\",\n    messagingSenderId: \"1012680112893\"\n};\n","import React, { Component } from 'react';\nimport logo from '../../images/logo.svg';\nimport './About.css';\nimport Form from '../Form/Form.js';\nimport firebase from 'firebase';\nimport firebaseConfig from '../../config';\n\n\nclass About extends Component {\n\n}\nexport default About;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Route, BrowserRouter, Link, Switch} from 'react-router-dom';\nimport Home from './components/App/App'\nimport About from './components/About/About'\nserviceWorker.unregister();\n\nconst Header = () => (\n    <nav className=\"navbar\">\n        <ul className=\"navbar-list clearfix\">\n            <li className=\"navbar-item\"><Link className=\"navbar-link\" to={`${process.env.PUBLIC_URL}/`}>Home</Link></li>\n            <li className=\"navbar-item\"><Link className=\"navbar-link\" to={`${process.env.PUBLIC_URL}/about`}>About</Link></li>\n        </ul>\n    </nav>\n);\n\nconst Main = () => (\n    <main className=\"container\">\n        <Switch>\n            <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home}/>\n            <Route path={`${process.env.PUBLIC_URL}/about`} component={About}/>\n        </Switch>\n    </main>\n);\n\nconst App = () => (\n    <div className=\"\">\n        <Header/>\n        <Main/>\n    </div>\n);\n\nReactDOM.render((\n    <BrowserRouter basename={'/'}>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}